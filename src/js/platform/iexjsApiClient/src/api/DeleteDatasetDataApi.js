/*
 * CRUD API iex
 * CRUD API client for iex data platform
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";

/**
* DeleteDatasetData service.
* @module api/DeleteDatasetDataApi
* @version 1.0.1
*/
export class DeleteDatasetDataApi {

    /**
    * Constructs a new DeleteDatasetDataApi. 
    * @alias module:api/DeleteDatasetDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the datasetsProviderIdKeyDelete operation.
     * @callback moduleapi/DeleteDatasetDataApi~datasetsProviderIdKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} provider provider name
     * @param {String} id dataset id
     * @param {String} key dataset data key
     * @param {String} token pk or sk token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/DeleteDatasetDataApi~datasetsProviderIdKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    datasetsProviderIdKeyDelete(provider, id, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling datasetsProviderIdKeyDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling datasetsProviderIdKeyDelete");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling datasetsProviderIdKeyDelete");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling datasetsProviderIdKeyDelete");
      }

      let pathParams = {
        'provider': provider,'id': id,'key': key
      };
      let queryParams = {
        'token': token,'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/datasets/{provider}/{id}/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}